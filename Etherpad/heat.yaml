heat_template_version: 2014-10-16


description: Install a quick and dirty etherpad as per instructions from https://github.com/ether/etherpad-lite#installation


parameters:

  key_name:
    type: string
    label: Key Name
    description: Name of an existing KeyPair to enable SSH access to the instances.
    constraints:
      - custom_constraint: nova.keypair
        description: Must be an existing KeyPair

  image_id:
    type: string
    label: Image ID
    description: Ubuntu 16.04 image to be used for compute instance
    default: 'd1d29eaf-c219-4f82-a588-7a8f668da4ab'

  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: m2.tiny
    constraints:
      - allowed_values: [m2.tiny, m2.small, m1.small, m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.small, m1.medium, m1.large or m1.xlarge.


resources:

  # Use this when we do not have Neutron networking.
  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::EC2::SecurityGroup
  web_security_group:
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Web server access rules.
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}

  etherpad_server:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Nova::Server
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      security_groups:
        - { get_resource: web_security_group }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            ## Install package dependencies
            apt-get update
            ## Upgrade would be nice but it adds a lot to the startup time to this application
            # Perhaps because it asks for user input?
            # apt-get upgrade -y
            apt-get install -y gzip git curl python libssl-dev pkg-config build-essential nodejs-legacy npm supervisor nginx

            ## Make a user to run etherpad with
            adduser --disabled-password --disabled-login --gecos "" etherpad

            ## Fetch software, configure and install
            cd /opt
            git clone --branch 1.6.0 https://github.com/ether/etherpad-lite.git etherpad-lite
            chown -R etherpad:etherpad etherpad-lite
            cd etherpad-lite
            bin/installDeps.sh > log.txt 2> error.txt

            ## Setup supervisord to keep the service running
            cat << EOT >> /etc/supervisor/conf.d/etherpad.conf
            [program:etherpad]
            command=node /opt/etherpad-lite/node_modules/ep_etherpad-lite/node/server.js
            directory=/opt/etherpad-lite
            user=etherpad
            autostart=true
            autorestart=true
            stderr_logfile=/var/log/etherpad.err.log
            stdout_logfile=/var/log/etherpad.out.log
            EOT

            ## Run Etherpad
            service supervisor restart


            # Setup nginx to only do proxy pass
            cat << EOT > /etc/nginx/sites-available/default
            server {
              listen 80;
              location / {
                proxy_pass http://127.0.0.1:9001;
                proxy_set_header Host \$host;
                proxy_http_version 1.1;
                proxy_read_timeout 1d;
             }
            }
            EOT

            # Restart nginx and everything should be ready!
            service nginx restart
            cfn-signal -e 0 -r "Command line tools server setup complete" 'WaitHandle'
          params:
            WaitHandle: { get_resource: wait_handle }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitConditionHandle
  wait_handle:
    type: 'AWS::CloudFormation::WaitConditionHandle'

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitCondition
  wait_condition:
    type: AWS::CloudFormation::WaitCondition
    depends_on: etherpad_server
    properties:
      Handle: { get_resource: wait_handle }
      Count: 1
      # we'll give it 5 minutes
      Timeout: 600


outputs:
  instance_ip:
    description: The IP address of the deployed instance.
    value: { get_attr: [etherpad_server, first_address] }
  url:
    description: The URL of the website
    value:
      str_replace:
        template: http://ip_address
        params:
          ip_address: { get_attr: [etherpad_server, first_address] }
